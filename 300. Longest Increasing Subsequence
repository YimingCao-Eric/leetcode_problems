class Solution(object):
    def lengthOfLIS(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        # dynamic programing
        # subproblem: max length of the longest strictly increasing subsequence of the first k elements, k<=n
        # eg. nums=[1,2,3,4] 
        #     subp1=[1]
        #     subp2=[1,3]
        
        # memorize the max length of LIS of each subproblem
        dp = [1] * len(nums)
        
        # for each element in the array
        for i in range(1,len(nums)):
        
        # find the number of prev elements that is smaller than it 
            for j in range(i):
                
                if nums[i]>nums[j]:
                    
                    dp[i]=max(dp[i],dp[j]+1)
                    
                    
        return max(dp)
